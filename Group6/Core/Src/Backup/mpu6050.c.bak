#include <math.h>
#include <mpu6050.h>

#define WHO_AM_I_REG 0x75
#define PWR_MGMT_1_REG 0x6B
#define SMPLRT_DIV_REG 0x19
#define ACCEL_CONFIG_REG 0x1C
#define GYRO_CONFIG_REG 0x1B
#define ACCEL_XOUT_H_REG 0x3B
#define GYRO_XOUT_H_REG 0x43
#define RAD_TO_DEG 57.295779513082320876798154814105

const double Accel_Z_corrector = 16384.0;

uint8_t MPU6050_Init(MPU6050* mpu6050, I2C_HandleTypeDef* i2cPort, uint16_t address){
	uint8_t check;
	uint8_t Data;

	mpu6050->i2cPort=i2cPort;
	mpu6050->address=address;

	HAL_I2C_Mem_Read(mpu6050->i2cPort, mpu6050->address<<1, WHO_AM_I_REG, 1, &check, 1, 1000);

	if (check !=0) // 0x68or0x98 will be returned by the sensor if everything goes well
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
		HAL_I2C_Mem_Write(mpu6050->i2cPort, mpu6050->address<<1, PWR_MGMT_1_REG, 1, &Data, 1, 1000);

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
		HAL_I2C_Mem_Write(mpu6050->i2cPort, mpu6050->address<<1, SMPLRT_DIV_REG, 1, &Data, 1, 1000);

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
		HAL_I2C_Mem_Write(mpu6050->i2cPort, mpu6050->address<<1, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		Data = 0x00;
		HAL_I2C_Mem_Write(mpu6050->i2cPort, mpu6050->address<<1, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
		return 0;
	}
	return 1;

}

void MPU6050_concatAndConvertAcc(MPU6050* mpu6050){
	mpu6050->Accel_X_RAW = (int16_t)(mpu6050->_recDataAG[0] << 8 | mpu6050->_recDataAG[1]);
	mpu6050->Accel_Y_RAW = (int16_t)(mpu6050->_recDataAG[2] << 8 | mpu6050->_recDataAG[3]);
	mpu6050->Accel_Z_RAW = (int16_t)(mpu6050->_recDataAG[4] << 8 | mpu6050->_recDataAG[5]);

	/*** convert the RAW values into acceleration in 'g'
		 we have to divide according to the Full scale value set in FS_SEL
		 I have configured FS_SEL = 0. So I am dividing by 16384.0
		 for more details check ACCEL_CONFIG Register              ****/

	mpu6050->Ax = mpu6050->Accel_X_RAW / 16384.0;
	mpu6050->Ay = mpu6050->Accel_Y_RAW / 16384.0;
	mpu6050->Az = mpu6050->Accel_Z_RAW / Accel_Z_corrector; //vedere perche non divide per 16284
}

void MPU6050_concatAndConvertGyr(MPU6050* mpu6050){
	mpu6050->Gyro_X_RAW = (int16_t)(mpu6050->_recDataAG[8] << 8 | mpu6050->_recDataAG[9]);
	mpu6050->Gyro_Y_RAW = (int16_t)(mpu6050->_recDataAG[10] << 8 | mpu6050->_recDataAG[11]);
	mpu6050->Gyro_Z_RAW = (int16_t)(mpu6050->_recDataAG[12] << 8 | mpu6050->_recDataAG[13]);

	/*** convert the RAW values into dps (�/s)
		 we have to divide according to the Full scale value set in FS_SEL
		 I have configured FS_SEL = 0. So I am dividing by 131.0
		 for more details check GYRO_CONFIG Register              ****/

	mpu6050->Gx = mpu6050->Gyro_X_RAW / 131.0;
	mpu6050->Gy = mpu6050->Gyro_Y_RAW / 131.0;
	mpu6050->Gz = mpu6050->Gyro_Z_RAW / 131.0;
}

void MPU6050_readAccel(MPU6050* mpu6050){

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(mpu6050->i2cPort, mpu6050->address<<1, ACCEL_XOUT_H_REG, 1, &(mpu6050->_recDataAG[0]), 6, 1000);

    MPU6050_concatAndConvertAcc(mpu6050);
}

void MPU6050_readAccelIT(MPU6050* mpu6050){
    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read_IT(mpu6050->i2cPort, mpu6050->address<<1, ACCEL_XOUT_H_REG, 1, &(mpu6050->_recDataAG[0]), 6);

}

void MPU6050_readGyro(MPU6050* mpu6050){
    // Read 6 BYTES of data starting from GYRO_XOUT_H register

    HAL_I2C_Mem_Read(mpu6050->i2cPort, mpu6050->address<<1, GYRO_XOUT_H_REG, 1, &(mpu6050->_recDataAG[8]), 6, 1000);

    MPU6050_concatAndConvertGyr(mpu6050);

}

void MPU6050_readGyroIT(MPU6050* mpu6050){
    // Read 6 BYTES of data starting from GYRO_XOUT_H register

    HAL_I2C_Mem_Read_IT(mpu6050->i2cPort, mpu6050->address<<1, GYRO_XOUT_H_REG, 1, &(mpu6050->_recDataAG[8]), 6);


}

void MPU6050_readAll(MPU6050* mpu6050){
    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(mpu6050->i2cPort, mpu6050->address<<1, ACCEL_XOUT_H_REG, 1, mpu6050->_recDataAG, 14, 1000);

    MPU6050_concatAndConvertAcc(mpu6050);
    MPU6050_concatAndConvertGyr(mpu6050);

}

void MPU6050_readAllIT(MPU6050* mpu6050){
	// Read 14 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read_IT(mpu6050->i2cPort, mpu6050->address<<1, ACCEL_XOUT_H_REG, 1, mpu6050->_recDataAG, 14);
}

double MPU6050_getPitch(MPU6050* mpu6050){
	 double app, value;
	  app = (mpu6050->Ax * mpu6050->Ax) + (mpu6050->Az * mpu6050->Az);
	  app = sqrt(app);

	  value = atan2(mpu6050->Ay, app);
	  value = value * 180 / 3.14;

	 return value;


}

double MPU6050_getRoll(MPU6050* mpu6050){
	double app, value;
	app = (mpu6050->Ay * mpu6050->Ay) + (mpu6050->Az * mpu6050->Az);
	app = sqrt(app);

	value = atan2(mpu6050->Ax, app);
	value = value * 180 / 3.14;

	return value;
}
