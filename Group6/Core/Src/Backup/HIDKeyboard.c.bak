/*
 * HIDKeyboard.c
 *
 *  Created on: Jun 9, 2022
 *      Author: duino
 */

#include "HIDKeyboard.h"
#include "usbd_customhid.h"

void HIDKeyboard_Init(HIDKeyboard* HIDkeyboard, USBD_HandleTypeDef* handler){
		HIDkeyboard->handler=handler;
		HIDkeyboard->L_CTRL = HIDKeyboard_ButtonReleased;
		HIDkeyboard->L_ALT = HIDKeyboard_ButtonReleased;
		HIDkeyboard->L_SHIFT = HIDKeyboard_ButtonReleased;
		HIDkeyboard->L_GUI = HIDKeyboard_ButtonReleased;
		HIDkeyboard->R_CTRL = HIDKeyboard_ButtonReleased;
		HIDkeyboard->R_ALT = HIDKeyboard_ButtonReleased;
		HIDkeyboard->R_SHIFT = HIDKeyboard_ButtonReleased;
		HIDkeyboard->R_GUI = HIDKeyboard_ButtonReleased;
		HIDkeyboard->key1 = 0;
		HIDkeyboard->key2 = 0;
		HIDkeyboard->key3 = 0;
		HIDkeyboard->key4 = 0;
		HIDkeyboard->key5 = 0;
		HIDkeyboard->key6 = 0;
	}

void _HIDKeyboard_press(HIDKeyboard* HIDkeyboard){
	uint8_t buff[9] = {0, 0, 0, 0, 0, 0, 0, 0, 0}; /* 9 bytes long report */

	/* Report ID */
	buff[0] = 0x01; /* Keyboard */

	/* Control buttons */
	buff[1] = 0;
	buff[1] |= HIDkeyboard->L_CTRL 	<< 0;	/* Bit 0 */
	buff[1] |= HIDkeyboard->L_SHIFT << 1;	/* Bit 1 */
	buff[1] |= HIDkeyboard->L_ALT 	<< 2;	/* Bit 2 */
	buff[1] |= HIDkeyboard->L_GUI 	<< 3;	/* Bit 3 */
	buff[1] |= HIDkeyboard->R_CTRL 	<< 4;	/* Bit 4 */
	buff[1] |= HIDkeyboard->R_SHIFT << 5;	/* Bit 5 */
	buff[1] |= HIDkeyboard->R_ALT 	<< 6;	/* Bit 6 */
	buff[1] |= HIDkeyboard->R_GUI 	<< 7;	/* Bit 7 */

	/* Padding */
	buff[2] = 0x00;

	/* Keys */
	buff[3] = HIDkeyboard->key1;
	buff[4] = HIDkeyboard->key2;
	buff[5] = HIDkeyboard->key3;
	buff[6] = HIDkeyboard->key4;
	buff[7] = HIDkeyboard->key5;
	buff[8] = HIDkeyboard->key6;

	/* Send to USB */
	USBD_CUSTOM_HID_SendReport(HIDkeyboard->handler, buff, 9);
}

void _HIDKeyboard_release(HIDKeyboard* HIDkeyboard){
	HIDkeyboard->L_CTRL = HIDKeyboard_ButtonReleased;
	HIDkeyboard->L_ALT = HIDKeyboard_ButtonReleased;
	HIDkeyboard->L_SHIFT = HIDKeyboard_ButtonReleased;
	HIDkeyboard->L_GUI = HIDKeyboard_ButtonReleased;
	HIDkeyboard->R_CTRL = HIDKeyboard_ButtonReleased;
	HIDkeyboard->R_ALT = HIDKeyboard_ButtonReleased;
	HIDkeyboard->R_SHIFT = HIDKeyboard_ButtonReleased;
	HIDkeyboard->R_GUI = HIDKeyboard_ButtonReleased;
	HIDkeyboard->key1 = 0;
	HIDkeyboard->key2 = 0;
	HIDkeyboard->key3 = 0;
	HIDkeyboard->key4 = 0;
	HIDkeyboard->key5 = 0;
	HIDkeyboard->key6 = 0;

	_HIDKeyboard_press(HIDkeyboard);
}

void _HIDKeyboard_pressAndRelease(HIDKeyboard* HIDkeyboard){
	_HIDKeyboard_press(HIDkeyboard);
	HAL_Delay(15);
	_HIDKeyboard_release(HIDkeyboard);
}

uint8_t HIDKeyboard_charToKeyCode(char c){
	if(c>='a' && c<='z')
		return c - 'a' + 0x4;
	if(c>='1' && c<='9')
		return c - '1'+ 0x1e;
	if(c=='0')
		return 0x27;
	if(c=='\n')
		return 0x28;
	if(c==' ')
		return 0x2c;
	if(c=='\t')
		return 0x2b;
	return 0x00;
}

int8_t HIDKeyboard_send(HIDKeyboard* HIDkeyboard, HIDKeyboard_Button firstButton, HIDKeyboard_Button secondButton, uint8_t thirdButton, int8_t releaseButtons){
	if(firstButton==secondButton && firstButton!=HIDKeyboard_NULL)
		return -1;

	if(thirdButton<0x00 || thirdButton>0x8c)
		return -2;

	HIDkeyboard->L_CTRL = HIDKeyboard_ButtonReleased;
	HIDkeyboard->L_ALT = HIDKeyboard_ButtonReleased;
	HIDkeyboard->L_SHIFT = HIDKeyboard_ButtonReleased;
	HIDkeyboard->L_GUI = HIDKeyboard_ButtonReleased;
	HIDkeyboard->R_CTRL = HIDKeyboard_ButtonReleased;
	HIDkeyboard->R_ALT = HIDKeyboard_ButtonReleased;
	HIDkeyboard->R_SHIFT = HIDKeyboard_ButtonReleased;
	HIDkeyboard->R_GUI = HIDKeyboard_ButtonReleased;

	switch(firstButton){
		case HIDKeyboard_NULL:
			break;
		case HIDKeyboard_AltL:
			HIDkeyboard->L_ALT=HIDKeyboard_ButtonPressed;
			break;
		case HIDKeyboard_CtrlL:
			HIDkeyboard->L_CTRL=HIDKeyboard_ButtonPressed;
			break;
		case HIDKeyboard_ShiftL:
			HIDkeyboard->L_SHIFT=HIDKeyboard_ButtonPressed;
			break;
		case HIDKeyboard_WinL:
			HIDkeyboard->L_GUI=HIDKeyboard_ButtonPressed;
			break;
		case HIDKeyboard_AltR:
			HIDkeyboard->R_ALT=HIDKeyboard_ButtonPressed;
			break;
		case HIDKeyboard_CtrlR:
			HIDkeyboard->R_CTRL=HIDKeyboard_ButtonPressed;
			break;
		case HIDKeyboard_ShiftR:
			HIDkeyboard->R_SHIFT=HIDKeyboard_ButtonPressed;
			break;
		case HIDKeyboard_WinR:
			HIDkeyboard->R_GUI=HIDKeyboard_ButtonPressed;
			break;
	}

	switch(secondButton){
		case HIDKeyboard_NULL:
			break;
		case HIDKeyboard_AltL:
			HIDkeyboard->L_ALT=HIDKeyboard_ButtonPressed;
			break;
		case HIDKeyboard_CtrlL:
			HIDkeyboard->L_CTRL=HIDKeyboard_ButtonPressed;
			break;
		case HIDKeyboard_ShiftL:
			HIDkeyboard->L_SHIFT=HIDKeyboard_ButtonPressed;
			break;
		case HIDKeyboard_WinL:
			HIDkeyboard->L_GUI=HIDKeyboard_ButtonPressed;
			break;
		case HIDKeyboard_AltR:
			HIDkeyboard->R_ALT=HIDKeyboard_ButtonPressed;
			break;
		case HIDKeyboard_CtrlR:
			HIDkeyboard->R_CTRL=HIDKeyboard_ButtonPressed;
			break;
		case HIDKeyboard_ShiftR:
			HIDkeyboard->R_SHIFT=HIDKeyboard_ButtonPressed;
			break;
		case HIDKeyboard_WinR:
			HIDkeyboard->R_GUI=HIDKeyboard_ButtonPressed;
			break;
	}

	HIDkeyboard->key1 = thirdButton;
	if(releaseButtons==1)
		_HIDKeyboard_pressAndRelease(HIDkeyboard);
	else
		_HIDKeyboard_press(HIDkeyboard);

	return 0;
}





